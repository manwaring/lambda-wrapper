service:
  name: lambda-wrapper-ts

plugins:
  - serverless-webpack
  - serverless-plugin-git-variables

provider:
  name: aws
  stage: example
  region: us-east-1
  runtime: nodejs12.x
  logRetentionInDays: 14
  httpApi:
    payload: '2.0'
  environment:
    LAMBDA_WRAPPER_LOG: true
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    REVISION: ${git:sha1}

functions:
  httpApi:
    handler: app/httpApi.handler
    events:
      - httpApi: GET /http/hello

  api:
    handler: app/api.handler
    events:
      - http:
          authorizer:
            name: authorizer
          method: get
          path: hello

  authorizer:
    handler: app/authorizer.handler

  cloudformation:
    handler: app/cloudformation.handler

  dynamodb:
    handler: app/dynamodb.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: Table.StreamArn

  generic:
    handler: app/generic.handler

  sns:
    handler: app/sns.handler
    events:
      - sns: sns-${self:service.name}-${self:provider.stage}

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    Bucket:
      Type: AWS::S3::Bucket

    EmptyBucketCustomResource:
      Type: Custom::EmptyBucket
      DependsOn: Bucket
      Properties:
        ServiceToken:
          Fn::GetAtt: CloudformationLambdaFunction.Arn
        BucketName:
          Ref: Bucket
